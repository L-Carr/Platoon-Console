from django.contrib.auth.models import Group
from rest_framework import status
from rest_framework.views import APIView
from rest_framework.response import Response
from rest_framework.permissions import AllowAny
from rest_framework.authtoken.models import Token
from django.conf import settings
from django.core.mail import send_mail
from .serializers import UserSerializer
from .utils import single_email_distro
class UserRegistration(APIView):
    # AllowAny: This permission class allows any user to access this view,
    # regardless of whether they are authenticated or not.
    permission_classes = [AllowAny]

    def post(self, request):
        # This method handles POST requests to register new users.

        # The data from the request is passed to the UserSerializer to validate and serialize.
        serializer = UserSerializer(data=request.data)
        
        # Check if the data provided by the client is valid according to the serializer.
        if serializer.is_valid():
            # If data is valid, save the user to the database using the serializer's save method.
            user = serializer.save()

            # Retrieve the 'Students' group. It's assumed that this group already exists in the database.
            group = Group.objects.get(name='Students')

            # Add the newly created user to the 'Students' group.
            user.groups.add(group)
            # Save any changes to the user instance.
            user.save()

            # Create or retrieve an authentication token for the newly registered user.
            token, created = Token.objects.get_or_create(user=user)
            if token:
                #single_email_distro(recipient_email, email_subject,email_greeting, email_body):
                single_email_distro(user.email,"Platoon.Console Registration","Welcome to Platoon.Console,","Thank you for registering with Platoon.Console. We hope you enjoy Code Platoon as much as we did.")
            
            # Return a success response to the client, with a message indicating registration was successful.
                return Response({'message': 'User registered.'}, status=status.HTTP_201_CREATED)
        else:
            # If the data is not valid, return a 400 Bad Request response,
            # including the error messages generated by the serializer.
            return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)
